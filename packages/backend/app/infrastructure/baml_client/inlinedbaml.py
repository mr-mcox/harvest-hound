# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "clients.baml": "client<llm> GPT41Mini {\n  provider openai\n  options {\n    model \"gpt-4.1-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.200.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "inventory.baml": "class Ingredient {\n    name string\n    quantity float\n    unit string\n\n    @@assert(positive_quantity, {{ this.quantity > 0 }})\n    @@assert(name_not_empty, {{ this.name|length > 0 }})\n    @@assert(unit_not_empty, {{ this.unit|length > 0 }})\n}\n\nfunction ExtractIngredients(text: string) -> Ingredient[] {\n    client \"openai/gpt-4.1-mini\"\n    prompt #\"\n        This text contains a list of ingredients.\n        <text>\n        {{ text }}\n        </text>\n\n        Extract the ingredients from the text. If the text is empty or contains no ingredients, return an empty list.\n\n        Normalize with these guidelines:\n        <guidelines>\n        <ingredient>\n        - Are singular and lowercase\n        - Use common ingredient names (e.g., \"carrot\" not \"baby carrot\")\n        </ingredient>\n        <unit>\n        - Use full names (pound, ounce, cup, tablespoon, teaspoon, bunch, head, etc.)\n        - Are singular and lowercase\n        - If unspecified, use the most reasonable unit for that ingredient\n        </unit>\n        <quantity>\n        - If unspecified, use a reasonable quantity one would purchase\n        - Always use numbers, never words (2 not \"two\")\n        </quantity>\n        </guidelines>\n\n        {{ ctx.output_format }}\n    \"#\n}\n\ntest carrots_single_ingredient {\n    functions [ExtractIngredients]\n    args {\n        text #\"\n        - 2 lbs carrots\n        \"#\n    }\n    @@assert({{this[0].name == \"carrot\"}})\n    @@assert({{this[0].quantity == 2}})\n    @@assert({{this[0].unit == \"pound\"}})\n}\n\ntest kale_with_bunch {\n    functions [ExtractIngredients]\n    args {\n        text \"1 bunch kale\"\n    }\n    @@assert({{this[0].name == \"kale\"}})\n    @@assert({{this[0].quantity == 1}})\n    @@assert({{this[0].unit == \"bunch\"}})\n}\n\ntest multi_line_ingredients {\n    functions [ExtractIngredients]\n    args {\n        text #\"\n        2 lbs carrots\n        1 bunch kale\n        \"#\n    }\n    @@assert({{this|length == 2}})\n    @@assert({{this[0].name == \"carrot\"}})\n    @@assert({{this[1].name == \"kale\"}})\n}\n\ntest carrots_rice {\n    functions [ExtractIngredients]\n    args {\n        text #\"\n        - 2 lbs carrots\\n- 1/2 cup rice\n        \"#\n    }\n    @@assert({{this[0].name == \"carrot\"}})\n    @@assert({{this[0].quantity == 2}})\n    @@assert({{this[0].unit == \"pound\"}})\n    @@assert({{this[1].name == \"rice\"}})\n    @@assert({{this[1].quantity == 0.5}})\n    @@assert({{this[1].unit == \"cup\"}})\n}\n\ntest csv_format {\n    functions [ExtractIngredients]\n    args {\n        text \"carrots, 2, lbs\"\n    }\n    @@assert({{this[0].name == \"carrot\"}})\n    @@assert({{this[0].quantity == 2}})\n    @@assert({{this[0].unit == \"pound\"}})\n}\n\ntest empty_input {\n    functions [ExtractIngredients]\n    args {\n        text \"\"\n    }\n    @@assert({{this|length == 0}})\n}\n",
}

def get_baml_files():
    return _file_map