# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {
    "clients.baml": 'client<llm> GPT41Mini {\n  provider openai\n  options {\n    model "gpt-4.1-mini"\n    api_key env.OPENAI_API_KEY\n  }\n}\n',
    "generators.baml": '// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: "python/pydantic", "typescript", "ruby/sorbet", "rest/openapi"\n    output_type "python/pydantic"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir "../"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version "0.200.0"\n\n    // Valid values: "sync", "async"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n',
    "inventory.baml": 'class Ingredient {\n    name string\n    quantity float\n    unit string\n}\n\nfunction ExtractIngredients(text: string) -> Ingredient[] {\n    client "openai/gpt-4.1-nano"\n    prompt #"\n        This text contains a list of ingredients.\n        <text>\n        {{ text }}\n        </text>\n\n        Extract the ingredients from the text.\n        Normalize with these guidelines\n        <guidelines>\n        <ingredient>\n        - Are singular and lowercase\n        </ingredient>\n        <unit>\n        - Use full names\n        - Are singular and lowercase\n        - If unspecified, use the most reasonable unit\n        </unit>\n        <quantity>\n        - If unspecified, use a reasonable quantity one would purchase\n        </quantity>\n        </guidelines>\n\n        {{ ctx.output_format }}\n    "#\n}\n\ntest carrots_single_ingredient {\n    functions [ExtractIngredients]\n    args {\n        text #"\n        - 2 lbs carrots\n        "#\n    }\n    @@assert({{this[0].name == "carrot"}})\n    @@assert({{this[0].quantity == 2}})\n    @@assert({{this[0].unit == "pound"}})\n}\n\n',
}


def get_baml_files():
    return _file_map
